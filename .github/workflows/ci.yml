name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: 🧪 Test & Validate
    runs-on: ubuntu-latest

    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint package.json
        run: |
          echo "🔍 Validating package.json..."
          node -e "
            const pkg = require('./package.json');
            if (!pkg.name || !pkg.version || !pkg.description) {
              throw new Error('Missing required fields in package.json');
            }
            console.log('✅ package.json is valid');
          "

      - name: 🔍 Validate manifest.json
        run: |
          echo "🔍 Validating manifest.json..."
          node -e "
            const manifest = require('./manifest.json');
            const pkg = require('./package.json');

            if (manifest.version !== pkg.version) {
              throw new Error(\`Version mismatch: manifest.json(\${manifest.version}) != package.json(\${pkg.version})\`);
            }

            if (!manifest.server || !manifest.tools || !Array.isArray(manifest.tools)) {
              throw new Error('Invalid manifest structure');
            }

            console.log('✅ manifest.json is valid');
            console.log(\`📦 Version: \${manifest.version}\`);
            console.log(\`🛠️ Tools: \${manifest.tools.length}\`);
          "

      - name: 🧪 Test MCP server
        run: |
          echo "🧪 Testing MCP server..."
          # Basic syntax check
          node -c server/index.js
          echo "✅ MCP server syntax is valid"

      - name: 🏗️ Test DXT build
        run: |
          echo "🏗️ Testing DXT build process..."
          chmod +x build-dxt.sh
          ./build-dxt.sh

      - name: 🔍 Validate DXT bundle
        run: |
          echo "🔍 Validating DXT bundle..."
          VERSION=$(node -p "require('./package.json').version")
          DXT_FILE="dist/financial-data-mcp-v${VERSION}.dxt"

          if [ ! -f "$DXT_FILE" ]; then
            echo "❌ DXT file not found: $DXT_FILE"
            exit 1
          fi

          # Test ZIP integrity
          unzip -t "$DXT_FILE" > /dev/null
          echo "✅ DXT bundle is valid"

          # Check required files in bundle
          unzip -l "$DXT_FILE" | grep -q "manifest.json" || (echo "❌ manifest.json missing in DXT"; exit 1)
          unzip -l "$DXT_FILE" | grep -q "package.json" || (echo "❌ package.json missing in DXT"; exit 1)
          unzip -l "$DXT_FILE" | grep -q "server/index.js" || (echo "❌ server/index.js missing in DXT"; exit 1)

          echo "✅ All required files present in DXT"

      - name: 📊 Bundle size check
        run: |
          VERSION=$(node -p "require('./package.json').version")
          DXT_FILE="dist/financial-data-mcp-v${VERSION}.dxt"
          SIZE=$(stat -f%z "$DXT_FILE" 2>/dev/null || stat -c%s "$DXT_FILE")
          SIZE_MB=$((SIZE / 1024 / 1024))

          echo "📦 DXT Bundle size: ${SIZE} bytes (${SIZE_MB} MB)"

          # Warn if bundle is too large (>50MB)
          if [ $SIZE -gt 52428800 ]; then
            echo "⚠️ Warning: DXT bundle is quite large (>50MB)"
          fi

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Security audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level=high

      - name: 🔍 Check for secrets
        run: |
          echo "🔍 Checking for potential secrets..."
          if grep -r -i "password\|secret\|key\|token" --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" . | grep -v "demo-key"; then
            echo "⚠️ Potential secrets found. Please review."
          else
            echo "✅ No obvious secrets detected"
          fi

  auto-tag:
    name: 🏷️ Auto Tag
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Check if tag needed
        id: check_tag
        run: |
          VERSION="v$(node -p "require('./package.json').version")"

          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists"
            echo "needs_tag=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $VERSION does not exist, will create"
            echo "needs_tag=true" >> $GITHUB_OUTPUT
            echo "tag_name=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ Create tag
        if: steps.check_tag.outputs.needs_tag == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "${{ steps.check_tag.outputs.tag_name }}" -m "Auto-tagged release ${{ steps.check_tag.outputs.tag_name }}"
          git push origin "${{ steps.check_tag.outputs.tag_name }}"

          echo "🎉 Created and pushed tag: ${{ steps.check_tag.outputs.tag_name }}"